{"version":3,"sources":["../../../src/di/util/Instantiator.js"],"names":[],"mappings":";;;;;;;;;;IAEqB,YAAY;aAAZ,YAAY;8BAAZ,YAAY;;;iBAAZ,YAAY;;eAER,wBAAC,IAAI,EAAE,IAAI,EAAE;AAC9B,gBAAI,IAAI,GAAG,SAAP,IAAI,GAAc,EACjB;;AACD,gBAAI;gBAAE,GAAG,CAAC;;;AAGd,gBAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;;;AAGhC,gBAAI,GAAG,IAAI,IAAI,EAAE,CAAC;;;;AAIlB,eAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;;;;AAK7B,mBAAO,MAAM,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;SAC3C;;;WArBgB,YAAY;;;qBAAZ,YAAY","file":"Instantiator.js","sourcesContent":["/* @flow */\n\nexport default class Instantiator {\n\n    static createInstance(Type, args) {\n        var Temp = function() {\n            }, // temporary constructor\n            inst, ret; // other vars\n\n        // Give the Temp constructor the Constructor's prototype\n        Temp.prototype = Type.prototype;\n\n        // Create a new instance\n        inst = new Temp();\n\n        // Call the original Constructor with the temp\n        // instance as its context (i.e. its 'this' value)\n        ret = Type.apply(inst, args);\n\n        // If an object has been returned then return it otherwise\n        // return the original instance.\n        // (consistent with behaviour of the new operator)\n        return Object(ret) === ret ? ret : inst;\n    }\n\n}"]}