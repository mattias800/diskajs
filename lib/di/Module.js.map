{"version":3,"sources":["../../src/di/Module.js"],"names":[],"mappings":";;;;;;;;;;;;8BACmB,mBAAmB;;;;0BACvB,eAAe;;;;4CACF,kCAAkC;;;;4CACnC,kCAAkC;;;;oCACzC,0BAA0B;;;;IAEzB,MAAM;AAMZ,aANM,MAAM,GAMT;8BANG,MAAM;;AAOnB,YAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACnB,YAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;AAC9B,YAAI,CAAC,6BAA6B,GAAG,EAAE,CAAC;KAC3C;;iBAVgB,MAAM;;eAYnB,cAAC,IAAI,EAAE;AACP,gBAAI,IAAI,KAAK,SAAS,EAAE;AACpB,oBAAI,IAAI,CAAC,6BAA6B,KAAK,EAAE,EAAE;AAC3C,0BAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;iBACpF,MAAM;AACH,0BAAM,IAAI,KAAK,CAAC,0DAA0D,GACtE,kCAAkC,GAAG,IAAI,CAAC,6BAA6B,GAAG,GAAG,CAAC,CAAC;iBACtF;aACJ;AACD,mBAAO,gCAAW,IAAI,EAAE,IAAI,CAAC,CAAC;SACjC;;;eAES,oBAAC,IAAI,EAAE,OAAe;kBAAf,OAAe,gJAAf,OAAe,qBAAf,OAAe,sBAAf,OAAe,eAAf,OAAe,2BAAf,OAAe;;AAC5B,gBAAI,QAAQ,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;;AAE3C,gBAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;AACnC,sBAAM,KAAK,CAAC,OAAO,GAAG,QAAQ,GAAG,yBAAyB,CAAC,CAAC;aAC/D;AACD,gBAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,gBAAI,OAAO,GAAG;AACV,uBAAO,EAAG,OAAO;AACjB,qBAAK,EAAG,SAAS;aACpB,CAAC;;AAEF,gBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;AAC9B,gBAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;;AAE7C,gBAAI,CAAC,6BAA6B,GAAG,QAAQ,CAAC;;AAE9C,mBAAO,4BAAO;AACV,wBAAQ,EAAG,kBAAC,SAAS,EAAK;AACtB,wBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC;iBACzC;aACJ,CAAC,CAAC;SACN;;;eAEgB,2BAAC,IAAI,EAAE;AACpB,gBAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC1B,uBAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;aACzC,MAAM;AACH,uBAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aAC9B;SACJ;;;WAvDgB,MAAM;;;qBAAN,MAAM;;AA2D3B,SAAS,qBAAqB,CAAC,IAAI,EAAE;AACjC,WAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;CACtD","file":"Module.js","sourcesContent":["/* @flow */\nimport BindTo from './bindings/BindTo';\nimport As from './bindings/As';\nimport InstanceBinding from './bindings/types/InstanceBinding';\nimport SingletonScope from './bindings/scopes/SingletonScope';\nimport Binding from './bindings/types/Binding';\n\nexport default class Module {\n\n    bindings:Object;\n    bindingsPerTypeName:Object;\n    lastSuccessFulBindingTypeName:string;\n\n    constructor() {\n        this.bindings = {};\n        this.bindingsPerTypeName = {};\n        this.lastSuccessFulBindingTypeName = '';\n    }\n\n    bind(type) {\n        if (type === undefined) {\n            if (this.lastSuccessFulBindingTypeName === '') {\n                throw new Error('First module bind() get undefined argument. Type is required.');\n            } else {\n                throw new Error('Module bind() get undefined argument. Type is required. ' +\n                    'Last successful binding was for ' + this.lastSuccessFulBindingTypeName + '.');\n            }\n        }\n        return new BindTo(type, this);\n    }\n\n    addBinding(type, binding:Binding):As {\n        var typeName = parseTypeNameFromType(type);\n\n        if (this.bindings[type] !== undefined) {\n            throw Error('Type ' + typeName + ' already has a binding.');\n        }\n        var that = this;\n\n        var binding = {\n            binding : binding,\n            scope : undefined\n        };\n\n        this.bindings[type] = binding;\n        this.bindingsPerTypeName[typeName] = binding;\n\n        this.lastSuccessFulBindingTypeName = typeName;\n\n        return new As({\n            setScope : (scopeType) => {\n                that.bindings[type].scope = scopeType;\n            }\n        });\n    }\n\n    getBindingForType(type) {\n        if (typeof type === 'string') {\n            return this.bindingsPerTypeName[type];\n        } else {\n            return this.bindings[type];\n        }\n    }\n\n}\n\nfunction parseTypeNameFromType(type) {\n    return type.toString().split(' ')[1].split('(')[0];\n}\n"]}