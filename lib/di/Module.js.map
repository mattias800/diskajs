{"version":3,"sources":["src/di/Module.js"],"names":[],"mappings":";;;;;;;;;;8BAAqB,mBAAmB;;0BACvB,eAAe;;4CACF,kCAAkC;;uCACxC,6BAA6B;;IAExC,MAAM;AAEJ,aAFF,MAAM,GAED;8BAFL,MAAM;;AAGX,YAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACnB,YAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;AAC9B,YAAI,CAAC,6BAA6B,GAAG,SAAS,CAAC;KAClD;;iBANQ,MAAM;;eAQX,cAAC,IAAI,EAAE;AACP,gBAAI,IAAI,KAAK,SAAS,EAAE;AACpB,oBAAI,IAAI,CAAC,6BAA6B,KAAK,SAAS,EAAE;AAClD,0BAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;iBACpF,MAAM;AACH,0BAAM,IAAI,KAAK,CAAC,0DAA0D,GACtE,kCAAkC,GAAG,IAAI,CAAC,6BAA6B,GAAG,GAAG,CAAC,CAAC;iBACtF;aACJ;AACD,mBAAO,oBAtBP,MAAM,CAsBY,IAAI,EAAE,IAAI,CAAC,CAAC;SACjC;;;eAES,oBAAC,IAAI,EAAE,OAAO,EAAE;AACtB,gBAAI,QAAQ,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;;AAE3C,gBAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;AACnC,sBAAM,KAAK,CAAC,OAAO,GAAG,QAAQ,GAAG,yBAAyB,CAAC,CAAC;aAC/D;AACD,gBAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,gBAAI,OAAO,GAAG;AACV,uBAAO,EAAE,OAAO;AAChB,qBAAK,EAAE,SAAS;aACnB,CAAC;;AAEF,gBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO,CAAE;AAC/B,gBAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;;AAE7C,gBAAI,CAAC,6BAA6B,GAAG,QAAQ,CAAC;;AAE9C,mBAAO,gBA1CP,EAAE,CA0CY;AACV,wBAAQ,EAAE,kBAAS,SAAS,EAAE;AAC1B,wBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC;iBACzC;aACJ,CAAC,CAAC;SACN;;;eAEgB,2BAAC,IAAI,EAAE;AACpB,gBAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC1B,uBAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;aACzC,MAAM;AACH,uBAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aAC9B;SACJ;;;WAnDQ,MAAM;;;QAAN,MAAM,GAAN,MAAM;;AAuDnB,SAAS,qBAAqB,CAAC,IAAI,EAAE;AACjC,WAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;CACtD","file":"src/di/Module.js","sourcesContent":["import {BindTo} from './bindings/BindTo';\nimport {As} from './bindings/As';\nimport {InstanceBinding} from './bindings/types/InstanceBinding';\nimport {Singleton} from './bindings/scopes/Singleton';\n\nexport class Module {\n\n    constructor() {\n        this.bindings = {};\n        this.bindingsPerTypeName = {};\n        this.lastSuccessFulBindingTypeName = undefined;\n    }\n\n    bind(type) {\n        if (type === undefined) {\n            if (this.lastSuccessFulBindingTypeName === undefined) {\n                throw new Error('First module bind() get undefined argument. Type is required.');\n            } else {\n                throw new Error('Module bind() get undefined argument. Type is required. ' +\n                    'Last successful binding was for ' + this.lastSuccessFulBindingTypeName + '.');\n            }\n        }\n        return new BindTo(type, this);\n    }\n\n    addBinding(type, binding) {\n        var typeName = parseTypeNameFromType(type);\n\n        if (this.bindings[type] !== undefined) {\n            throw Error('Type ' + typeName + ' already has a binding.');\n        }\n        var that = this;\n\n        var binding = {\n            binding: binding,\n            scope: undefined\n        };\n\n        this.bindings[type] = binding ;\n        this.bindingsPerTypeName[typeName] = binding;\n\n        this.lastSuccessFulBindingTypeName = typeName;\n\n        return new As({\n            setScope: function(scopeType) {\n                that.bindings[type].scope = scopeType;\n            }\n        });\n    }\n\n    getBindingForType(type) {\n        if (typeof type === 'string') {\n            return this.bindingsPerTypeName[type];\n        } else {\n            return this.bindings[type];\n        }\n    }\n\n}\n\nfunction parseTypeNameFromType(type) {\n    return type.toString().split(' ')[1].split('(')[0];\n}\n"]}