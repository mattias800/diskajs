{"version":3,"sources":["../../../src/di/bindings/BindTo.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKqB,MAAM;AAEvB,aAFiB,MAAM,CAEX,IAAI,EAAE,MAAM,EAAE;8BAFT,MAAM;;AAGnB,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;;iBALgB,MAAM;;mCAOZ,QAAQ,EAAE;AACjB,gBAAI,QAAQ,KAAK,SAAS,EAAE;AACxB,sBAAM,KAAK,CAAC,0DAA0D,GAClE,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;aAC/C;AACD,mBAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,8BAAoB,QAAQ,CAAC,CAAC,CAAC;SAC3E;;;mCAEU,QAAQ,EAAE;AACjB,gBAAI,QAAQ,KAAK,SAAS,EAAE;AACxB,sBAAM,KAAK,CAAC,0DAA0D,GAClE,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;aAC/C;AACD,mBAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,8BAAoB,QAAQ,CAAC,CAAC,CAAC;SAC3E;;;2BAEE,QAAQ,EAAE;AACT,gBAAI,QAAQ,KAAK,SAAS,EAAE;AACxB,sBAAM,KAAK,CAAC,kDAAkD,GAAG,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;aAC5G;AACD,mBAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,2BAAiB,QAAQ,CAAC,CAAC,CAAC;SACxE;;;WA5BgB,MAAM;;;kBAAN,MAAM;;AAgC3B,SAAS,qBAAqB,CAAC,IAAI,EAAE;AACjC,WAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;CACtD","file":"BindTo.js","sourcesContent":["import ClassBinding from './types/ClassBinding';\nimport InstanceBinding from './types/InstanceBinding';\nimport ProviderBinding from './types/ProviderBinding';\nimport Provider from './../Provider';\n\nexport default class BindTo {\n\n    constructor(type, module) {\n        this.type = type;\n        this.module = module;\n    }\n\n    toProvider(provider) {\n        if (provider === undefined) {\n            throw Error('toProvider() got undefined argument when trying to bind ' +\n                parseTypeNameFromType(this.type) + '.');\n        }\n        return this.module.addBinding(this.type, new ProviderBinding(provider));\n    }\n\n    toInstance(instance) {\n        if (instance === undefined) {\n            throw Error('toInstance() got undefined argument when trying to bind ' +\n                parseTypeNameFromType(this.type) + '.');\n        }\n        return this.module.addBinding(this.type, new InstanceBinding(instance));\n    }\n\n    to(TheClass) {\n        if (TheClass === undefined) {\n            throw Error('to() got undefined argument when trying to bind ' + parseTypeNameFromType(this.type) + '.');\n        }\n        return this.module.addBinding(this.type, new ClassBinding(TheClass));\n    }\n\n}\n\nfunction parseTypeNameFromType(type) {\n    return type.toString().split(' ')[1].split('(')[0];\n}\n"]}