{"version":3,"sources":["src/di/bindings/types/ProviderBinding.js"],"names":[],"mappings":";;;;;;;;;;wBAAuB,gBAAgB;;IAE1B,eAAe;AAEb,aAFF,eAAe,CAEZ,aAAa,EAAE;8BAFlB,eAAe;;AAGpB,YAAI,CAAC,aAAa,GAAG,aAAa,CAAC;KACtC;;iBAJQ,eAAe;;eAMrB,aAAC,QAAQ,EAAE;AACV,gBAAI,QAAQ,CAAC;AACb,gBAAI,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,UAAU,EAAE;AACjD,wBAAQ,GAAG,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;aACvC,MAAM;AACH,wBAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC/C;AACD,gBAAI,EAAE,QAAQ,sBAfd,QAAQ,CAe0B,AAAC,EAAE;AACjC,sBAAM,KAAK,CAAC,6CAA6C,CAAC,CAAC;aAC9D;AACD,mBAAO,QAAQ,CAAC,GAAG,EAAE,CAAC;SACzB;;;WAjBQ,eAAe;;;QAAf,eAAe,GAAf,eAAe","file":"src/di/bindings/types/ProviderBinding.js","sourcesContent":["import {Provider} from '../../Provider';\n\nexport class ProviderBinding {\n\n    constructor(ProviderClass) {\n        this.ProviderClass = ProviderClass;\n    }\n\n    get(injector) {\n        var provider;\n        if (typeof this.ProviderClass.inject !== 'function') {\n            provider = new this.ProviderClass();\n        } else {\n            provider = injector.get(this.ProviderClass);\n        }\n        if (!(provider instanceof Provider)) {\n            throw Error('toProvider() argument must extend Provider.');\n        }\n        return provider.get();\n    }\n}\n"]}