{"version":3,"sources":["../../../../src/di/bindings/types/ProviderBinding.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMqB,eAAe;cAAf,eAAe;;AAIhC,aAJiB,eAAe,CAIpB,aAAiB,EAAE;8BAJd,eAAe;;2EAAf,eAAe;;AAM5B,cAAK,aAAa,GAAG,aAAa,CAAC;;KACtC;;iBAPgB,eAAe;;4BAS5B,QAAiB,EAAM;AACvB,gBAAI,QAAQ,CAAC;AACb,gBAAI,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,UAAU,EAAE;AACjD,wBAAQ,GAAG,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;aACvC,MAAM;AACH,wBAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC/C;AACD,gBAAI,EAAE,QAAQ,+BAAoB,AAAC,EAAE;AACjC,sBAAM,KAAK,CAAC,6CAA6C,CAAC,CAAC;aAC9D;AACD,mBAAO,QAAQ,CAAC,GAAG,EAAE,CAAC;SACzB;;;WApBgB,eAAe;;;kBAAf,eAAe","file":"ProviderBinding.js","sourcesContent":["/* @flow */\n\nimport Provider from '../../Provider';\nimport Binding from './Binding';\nimport Injector from \"../../Injector\"\n\nexport default class ProviderBinding extends Binding {\n\n    ProviderClass:any;\n\n    constructor(ProviderClass:any) {\n        super();\n        this.ProviderClass = ProviderClass;\n    }\n\n    get(injector:Injector):any {\n        var provider;\n        if (typeof this.ProviderClass.inject !== 'function') {\n            provider = new this.ProviderClass();\n        } else {\n            provider = injector.get(this.ProviderClass);\n        }\n        if (!(provider instanceof Provider)) {\n            throw Error('toProvider() argument must extend Provider.');\n        }\n        return provider.get();\n    }\n}\n"]}