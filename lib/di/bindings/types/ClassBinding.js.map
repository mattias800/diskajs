{"version":3,"sources":["src/di/bindings/types/ClassBinding.js"],"names":[],"mappings":";;;;;;;;;;gCAA2B,yBAAyB;;IAEvC,YAAY;AAEV,aAFF,YAAY,CAET,QAAQ,EAAE;8BAFb,YAAY;;AAGjB,YAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;;iBAJQ,YAAY;;eAMlB,aAAC,QAAQ,EAAE;AACV,gBAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;AACzB,gBAAI,SAAS,CAAC;AACd,gBAAI,oCAAoC,GAAG,KAAK,CAAC;AACjD,gBAAI,OAAO,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;AACnC,yBAAS,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;aAC7B,MAAM;AACH,oDAAoC,GAAG,IAAI,CAAC;AAC5C,yBAAS,GAAG,iCAAiC,CAAC,IAAI,CAAC,CAAC;aACvD;;AAED,gBAAI,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,UAAC,OAAO,EAAK;AAClC,oBAAI;AACA,2BAAO,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBAChC,CAAC,OAAO,CAAC,EAAE;AACR,wBAAI,oCAAoC,EAAE;AACtC,4BAAI,QAAQ,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;AAC3C,4BAAI,WAAW,GAAG,qBAAqB,CAAC,OAAO,CAAC,CAAC;;AAEjD,8BAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,WAAW,GAAG,QAAQ,GAAG,QAAQ,GACnE,2DAA2D,GAC3D,+EAA+E,GAC/E,yBAAyB,GAAG,WAAW,GAAG,OAAO,GAAG,WAAW,GAAG,mCAAmC,GACrG,QAAQ,GAAG,GAAG,CAAC,CAAC;qBACvB,MAAM;AACH,8BAAM,CAAC,CAAC;qBACX;iBACJ;aACJ,CAAC,CAAC;AACH,mBAAO,kBArCP,YAAY,CAqCQ,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SAC3D;;;WApCQ,YAAY;;;QAAZ,YAAY,GAAZ,YAAY;;AAuCzB,SAAS,qBAAqB,CAAC,IAAI,EAAE;AACjC,QAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC1B,eAAO,IAAI,CAAC;KACf,MAAM;AACH,eAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KACtD;CACJ;;AAED,SAAS,iCAAiC,CAAC,IAAI,EAAE;AAC7C,WAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAS,QAAQ,EAAE;AACjF,eAAO,qBAAqB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;KACjD,CAAC,CAAC,MAAM,CAAC,UAAS,QAAQ,EAAE;AACzB,eAAO,QAAQ,GAAG,IAAI,GAAG,KAAK,CAAC;KAClC,CAAC,CAAC;CACN;;AAED,SAAS,qBAAqB,CAAC,CAAC,EAAE;AAC9B,WAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;CACjD","file":"src/di/bindings/types/ClassBinding.js","sourcesContent":["import {Instantiator} from '../../util/Instantiator';\n\nexport class ClassBinding {\n\n    constructor(TheClass) {\n        this.TheClass = TheClass;\n    }\n\n    get(injector) {\n        var type = this.TheClass;\n        var depsTypes;\n        var isInjectingUsingConstructorArguments = false;\n        if (typeof type.inject === 'function') {\n            depsTypes = type.inject();\n        } else {\n            isInjectingUsingConstructorArguments = true;\n            depsTypes = parseArgumentsFromTypeConstructor(type);\n        }\n\n        var deps = depsTypes.map((depType) => {\n            try {\n                return injector.get(depType);\n            } catch (e) {\n                if (isInjectingUsingConstructorArguments) {\n                    var typeName = parseTypeNameFromType(type);\n                    var depTypeName = parseTypeNameFromType(depType);\n\n                    throw new Error('Trying to inject ' + depTypeName + ' into ' + typeName +\n                        ' using constructor argument, but could not find binding. ' +\n                        'Implicit binding is not possible when injecting using constructor arguments, ' +\n                        'please add module.bind(' + depTypeName + ').to(' + depTypeName + ') for all dependencies needed by ' +\n                        typeName + '.');\n                } else {\n                    throw e;\n                }\n            }\n        });\n        return Instantiator.createInstance(this.TheClass, deps);\n    }\n}\n\nfunction parseTypeNameFromType(type) {\n    if (typeof type === 'string') {\n        return type;\n    } else {\n        return type.toString().split(' ')[1].split('(')[0];\n    }\n}\n\nfunction parseArgumentsFromTypeConstructor(type) {\n    return type.toString().split('(')[1].split(')')[0].split(',').map(function(argument) {\n        return capitalizeFirstLetter(argument.trim());\n    }).filter(function(argument) {\n        return argument ? true : false;\n    });\n}\n\nfunction capitalizeFirstLetter(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\n"]}