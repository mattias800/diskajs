{"version":3,"sources":["../../../../src/di/bindings/types/ClassBinding.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;gCAEyB,yBAAyB;;;;wBAC9B,WAAW;;;;wBACV,gBAAgB;;;;IAEhB,YAAY;cAAZ,YAAY;;AAIlB,aAJM,YAAY,CAIjB,QAAY,EAAE;8BAJT,YAAY;;AAKzB,mCALa,YAAY,6CAKjB;AACR,YAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;;iBAPgB,YAAY;;eAS1B,aAAC,QAAiB;kBAAjB,QAAiB,sIAAjB,QAAiB,qBAAjB,QAAiB,sBAAjB,QAAiB,eAAjB,QAAiB,2BAAjB,QAAiB;;AACjB,gBAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;AACzB,gBAAI,SAAS,CAAC;AACd,gBAAI,oCAAoC,GAAG,KAAK,CAAC;AACjD,gBAAI,OAAO,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;AACnC,yBAAS,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;aAC7B,MAAM,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;AAC5C,yBAAS,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aACnC,MAAM;AACH,oDAAoC,GAAG,IAAI,CAAC;AAC5C,yBAAS,GAAG,iCAAiC,CAAC,IAAI,CAAC,CAAC;aACvD;;AAED,gBAAI,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,UAAC,OAAO,EAAK;AAClC,uBAAO,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aAChC,CAAC,CAAC;AACH,mBAAO,8BAAa,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SAC3D;;;WA1BgB,YAAY;;;qBAAZ,YAAY;;AA6BjC,SAAS,qBAAqB,CAAC,IAAQ;AACnC,QAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;mBACnB,IAAI,gIAAJ,IAAI,qBAAJ,IAAI,sBAAJ,IAAI,eAAJ,IAAI,2BAAJ,IAAI;eAAJ,IAAI;KACd,MAAM;;;yCACI,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;;KACrD;CACJ;;AAED,SAAS,iCAAiC,CAAC,IAAQ;;;sDACxC,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CACxD,GAAG,CAAC,UAAC,QAAQ;eAAK,qBAAqB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;KAAA,CAAC,CACzD,MAAM,CAAC,UAAC,QAAQ;eAAK,QAAQ,GAAG,IAAI,GAAG,KAAK;KAAA,CAAC;;;CACrD;;AAED,SAAS,qBAAqB,CAAC,CAAQ;;;eAAR,CAAQ,wGAAR,CAAQ,qBAAR,CAAQ,sBAAR,CAAQ,eAAR,CAAQ,2BAAR,CAAQ;WAC5B,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;;;CAChD","file":"ClassBinding.js","sourcesContent":["/* @flow */\n\nimport Instantiator from '../../util/Instantiator';\nimport Binding from './Binding';\nimport Injector from \"../../Injector\"\n\nexport default class ClassBinding extends Binding {\n\n    TheClass:any;\n\n    constructor(TheClass:any) {\n        super();\n        this.TheClass = TheClass;\n    }\n\n    get(injector:Injector) {\n        var type = this.TheClass;\n        var depsTypes;\n        var isInjectingUsingConstructorArguments = false;\n        if (typeof type.inject === 'function') {\n            depsTypes = type.inject();\n        } else if (type.__diska && type.__diska.inject) {\n            depsTypes = type.__diska.inject;\n        } else {\n            isInjectingUsingConstructorArguments = true;\n            depsTypes = parseArgumentsFromTypeConstructor(type);\n        }\n\n        var deps = depsTypes.map((depType) => {\n            return injector.get(depType);\n        });\n        return Instantiator.createInstance(this.TheClass, deps);\n    }\n}\n\nfunction parseTypeNameFromType(type:any):string {\n    if (typeof type === 'string') {\n        return type;\n    } else {\n        return type.toString().split(' ')[1].split('(')[0];\n    }\n}\n\nfunction parseArgumentsFromTypeConstructor(type:any):Array<string> {\n    return type.toString().split('(')[1].split(')')[0].split(',')\n        .map((argument) => capitalizeFirstLetter(argument.trim()))\n        .filter((argument) => argument ? true : false);\n}\n\nfunction capitalizeFirstLetter(s:string):string {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\n"]}