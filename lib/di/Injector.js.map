{"version":3,"sources":["../../src/di/Injector.js"],"names":[],"mappings":"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","file":"Injector.js","sourcesContent":["/* @flow */\nimport Module from './Module';\nimport Instantiator from './util/Instantiator';\nimport Validator from './util/Validator';\nimport ClassBinding from './bindings/types/ClassBinding';\nimport InstanceBinding from './bindings/types/InstanceBinding';\nimport SingletonScope from './bindings/scopes/SingletonScope';\n\nexport default class Injector {\n\n    modules:Array<Module>;\n    injectorStack:Array<any>;\n    implicitBindings:Object;\n\n    constructor(modules:Array<Module>) {\n        this.modules = getModulesFromArguments(modules, arguments);\n        this.injectorStack = [];\n        this.implicitBindings = {};\n        validateModules(this.modules);\n    }\n\n    get(type:any) {\n        return get(type, this);\n    }\n\n    getChildInjector(childModules:Array<Module>):Injector {\n        var modules = getModulesFromArguments(childModules, arguments);\n        for (var i = 0; i < this.modules.length; i++) {\n            modules.push(this.modules[i]);\n        }\n        return new Injector(modules);\n    }\n}\n\nfunction get(typeOrTypeName:any, injector:Injector) {\n    if (typeOrTypeName === undefined) {\n        throw Error('Injector.get() requires one argument.');\n    }\n    if (listContainsType(injector.injectorStack, typeOrTypeName)) {\n        throw Error('Circular injection.');\n    }\n    injector.injectorStack.push(typeOrTypeName);\n\n    var binding = findBindingInModules(typeOrTypeName, injector);\n    if (binding === undefined) {\n        if (injector.implicitBindings[typeOrTypeName]) {\n            binding = injector.implicitBindings[typeOrTypeName];\n        } else {\n            binding = createImplicitBinding(typeOrTypeName);\n            injector.implicitBindings[typeOrTypeName] = binding;\n        }\n    }\n    binding = updateBindingIfSingleton(binding, injector);\n    var instance = binding.binding.get(injector);\n    injector.injectorStack.pop();\n    return instance;\n}\n\nfunction validateModules(modules:Array<Module>) {\n    for (var i = 0; i < modules.length; i++) {\n        if (!(modules[i] instanceof Module)) {\n            throw Error('Injector() can only take modules as arguments.');\n        }\n    }\n}\nfunction getModulesFromArguments(modules:Array<Module>, args) {\n    if (modules instanceof Array) {\n        return modules;\n    } else {\n        var list = [];\n        for (var i = 0; i < args.length; i++) {\n            list.push(args[i]);\n        }\n        return list;\n    }\n}\n\nfunction findBindingInModules(type, injector:Injector) {\n    for (var i = 0; i < injector.modules.length; i++) {\n        var module = injector.modules[i];\n        var binding = module.getBindingForType(type);\n        if (binding) {\n            return binding;\n        }\n    }\n    return undefined;\n}\n\nfunction updateBindingIfSingleton(binding, injector:Injector) {\n    if ((binding.scope === SingletonScope || getDecoratedBindingFromBinding(binding) === SingletonScope) && !(binding.binding instanceof InstanceBinding)) {\n        binding.binding = new InstanceBinding(binding.binding.get(injector));\n    }\n    return binding;\n}\n\nfunction getDecoratedBindingFromBinding(binding) {\n    if (\n        binding.binding.TheClass &&\n        binding.binding.TheClass.__diska &&\n        binding.binding.TheClass.__diska.scope) {\n        return binding.binding.TheClass.__diska.scope;\n    } else {\n        return undefined;\n    }\n}\n\nfunction createImplicitBinding(type:Object) {\n    if (typeof type === 'string') {\n        throw new Error('Failed when trying to inject ' + type + '. ' +\n            'Implicit binding is only possible if type was added to module. Use module.bind() to bind it. ' +\n            'If you are using constructor argument injection, you must bind all dependencies explicitly.');\n    }\n    return {\n        binding : new ClassBinding(type)\n    };\n}\n\nfunction listContainsType(list:Array<any>, type:any):boolean {\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] === type) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"]}