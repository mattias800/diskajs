{"version":3,"sources":["src/di/Injector.js"],"names":[],"mappings":"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","file":"src/di/Injector.js","sourcesContent":["import {Module} from './Module';\nimport {Instantiator} from './util/Instantiator';\nimport {Validator} from './util/Validator';\nimport {ClassBinding} from './bindings/types/ClassBinding';\nimport {InstanceBinding} from './bindings/types/InstanceBinding';\nimport {Singleton} from './bindings/scopes/Singleton';\n\nexport class Injector {\n\n    constructor(modules) {\n        this.modules = getModulesFromArguments(modules, arguments);\n        this.injectorStack = [];\n        validateModules(this.modules);\n    }\n\n    get(type) {\n        return get(type, this);\n    }\n\n    getChildInjector(childModules) {\n        var modules = getModulesFromArguments(childModules, arguments);\n        for (var i = 0; i < this.modules.length; i++) {\n            modules.push(this.modules[i]);\n        }\n        return new Injector(modules);\n    }\n}\n\nfunction get(typeOrTypeName, injector) {\n    if (typeOrTypeName === undefined) {\n        throw Error('Injector.get() requires one argument.');\n    }\n    if (listContainsType(injector.injectorStack, typeOrTypeName)) {\n        throw Error('Circular injection.');\n    }\n    injector.injectorStack.push(typeOrTypeName);\n    var binding = findBindingInModules(typeOrTypeName, injector);\n    binding = createTemporaryBindingIfNotDefined(binding, typeOrTypeName, injector);\n    binding = updateBindingIfSingleton(binding, injector);\n    var instance = binding.binding.get(injector);\n    injector.injectorStack.pop();\n    return instance;\n}\n\nfunction validateModules(modules) {\n    for (var i = 0; i < modules.length; i++) {\n        if (!(modules[i] instanceof Module)) {\n            throw Error('Injector() can only take modules as arguments.');\n        }\n    }\n}\nfunction getModulesFromArguments(modules, args) {\n    if (modules instanceof Array) {\n        return modules;\n    } else {\n        var list = [];\n        for (var i = 0; i < args.length; i++) {\n            list.push(args[i]);\n        }\n        return list;\n    }\n}\n\nfunction findBindingInModules(type, injector) {\n    for (var i = 0; i < injector.modules.length; i++) {\n        var module = injector.modules[i];\n        var binding = module.getBindingForType(type);\n        if (binding) {\n            return binding;\n        }\n    }\n    return undefined;\n}\n\nfunction updateBindingIfSingleton(binding, injector) {\n    if (binding.scope === Singleton && !(binding.binding instanceof InstanceBinding)) {\n        binding.binding = new InstanceBinding(binding.binding.get(injector));\n    }\n    return binding;\n}\n\nfunction createTemporaryBindingIfNotDefined(binding, type, injector) {\n    if (binding === undefined) {\n        if (typeof type === 'string') {\n            throw new Error('Trying to bind implicitly, but got type name instead of type for ' + type + '. ' +\n                'Implicit binding is only possible if type was added to module. Use module.bind() to bind it.');\n        }\n        binding = {\n            binding: new ClassBinding(type)\n        };\n    }\n    return binding;\n}\n\nfunction listContainsType(list, type) {\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] === type) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"]}